name: CI/CD

on:
  push:
    tags: [v*]
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  code-quality:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20.11.0
          cache: yarn

      - name: Install dev dependencies
        run: yarn install --production=false

      - name: Run markdown linter
        shell: bash
        run: |
          if yarn markdownlint; then
            echo "No issues in markdown files."
          else
              exit 1
          fi

      - name: Run ESLinting and formatting
        shell: bash
        run: yarn lint

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20.x]
    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: yarn

      - name: Install dev dependencies
        run: yarn install --production=false

      - name: Run Tests
        run: yarn test

  build:
    if: ${{ ! startsWith(github.ref, 'refs/tags') }}
    runs-on: ubuntu-latest
    needs:
      - code-quality
      - test
    steps:
      - uses: actions/checkout@v4

      - name: Build
        run: make build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1.6.1

      - name: Publish initial image based on branch to ECR
        env:
          DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        shell: bash
        run: |
          if [[ "${GITHUB_REF}" == "refs/heads"* ]]; then
            branch="${GITHUB_REF/refs\/heads\//}"
            if [[ "${branch}" = "main" ]]; then
              docker_tag=latest
              docker tag navigator-admin-frontend "$ECR_REGISTRY/navigator-admin-frontend:${docker_tag}"
              docker push "$ECR_REGISTRY/navigator-admin-frontend:${docker_tag}"
            fi
          elif [[ "${GITHUB_REF}" != "refs/tags"* ]]; then
            echo "Assuming '${GITHUB_HEAD_REF}' is a branch"
            if [[ -n "${GITHUB_HEAD_REF}" ]]; then
                branch="$(echo ${GITHUB_HEAD_REF}| tr -c '[0-9,A-Z,a-z]' '-')"
                timestamp=$(date --utc -Iseconds | cut -c1-19 | tr -c '[0-9]T\n' '-')
                short_sha=${GITHUB_SHA:0:8}
                docker_tag="${branch}-${timestamp}-${short_sha}"
                docker tag navigator-admin-frontend "$ECR_REGISTRY/navigator-admin-frontend:${docker_tag}"
                docker push "$ECR_REGISTRY/navigator-admin-frontend:${docker_tag}"
            fi
          fi

  manual-semver:
    needs:
      - code-quality
      - test
    if: ${{ startsWith(github.ref, 'refs/tags') }}
    uses: climatepolicyradar/reusable-workflows/.github/workflows/semver.yml@main
    secrets: inherit
    with:
      repo-name: navigator-admin-frontend
      semver-tag: main-${GITHUB_SHA::8}

  tag:
    needs: build
    uses: climatepolicyradar/reusable-workflows/.github/workflows/tag.yml@main
    with:
      repo-name: navigator-admin-frontend
      semver-tag: main-${GITHUB_SHA::8}
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}

  release:
    needs: tag
    uses: climatepolicyradar/reusable-workflows/.github/workflows/release.yml@main
    with:
      new_tag: ${{ needs.tag.outputs.new_tag }}
