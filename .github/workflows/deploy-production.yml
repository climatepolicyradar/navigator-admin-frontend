name: Deploy to production
on:
  workflow_dispatch:
    inputs:
      # This is a gated deploy workflow.
      # User inputs are intentional and protected by:
      # 1. Environment protection rules requiring approval
      # 2. Only deploying existing images
      # trunk-ignore(checkov/CKV_GHA_7)
      sha:
        description: Git SHA to deploy
        type: string
        required: true

permissions:
  id-token: write
  contents: read

jobs:
  deploy-production:
    runs-on: ubuntu-latest
    environment:
      name: production
    steps:
      - uses: actions/checkout@v4
        with:
          ref: main

      - name: Configure AWS credentials (production)
        uses: aws-actions/configure-aws-credentials@v4.2.1
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/navigator-admin-frontend-github-actions
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: eu-west-1

      - name: Login to Amazon ECR (production)
        id: login-ecr-production
        uses: aws-actions/amazon-ecr-login@d63b14614fe5d7fc5e5e52c523dea4e876816cc4

      - name: Build, tag, and push to ECR with 'latest' tag
        id: build-image
        env:
          ECR_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
          IMAGE_TAG: latest
          AWS_REGION: eu-west-1
          ECR_REPOSITORY: navigator-admin-frontend
          VITE_PORT: 3000
        run: |
          # Build with local tag first
          make build
          # Tag with ECR path and 'latest'
          docker tag navigator-admin-frontend $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          # Push to ECR
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
